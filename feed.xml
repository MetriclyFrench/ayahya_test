<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-04-13T04:12:30-07:00</updated><id>/</id><title type="html">AYahya</title><subtitle>An amazing website.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="/blog/2017/04/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-04-11T04:28:19-07:00</published><updated>2017-04-11T04:28:19-07:00</updated><id>/blog/2017/04/welcome-to-jekyll</id><content type="html" xml:base="/blog/2017/04/welcome-to-jekyll/">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>Abdul Yahya</name><email>contact@ayahya.me</email></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">You Can Do Better: Reach For The Stars With SpeedTracker</title><link href="/blog/2017/04/monitor-pwa-website-performance/" rel="alternate" type="text/html" title="You Can Do Better: Reach For The Stars With SpeedTracker" /><published>2017-04-10T06:58:37-07:00</published><updated>2017-04-10T06:58:37-07:00</updated><id>/blog/2017/04/monitor-pwa-website-performance</id><content type="html" xml:base="/blog/2017/04/monitor-pwa-website-performance/">&lt;p&gt;How do you monitor website performance? Is it monitored? How do you know if your website is getting faster? Or when it falls below critical performance thresholds? Are you receiving automated alerts? If not, you could be. And it won’t cost you a dime to get started with SpeedTracker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SpeedTracker is a tool that allows you to monitor website performance over time&lt;/strong&gt;. Use it to visualize your page speed scores, track your &lt;a target=&quot;_intro&quot; rel=&quot;noopener nofollow noreferrer&quot; href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;Lighthouse metrics&lt;/a&gt;, receive alerts and even create a dashboard consisting of multiple websites for quick reference.&lt;/p&gt;

&lt;blockquote cite=&quot;https://speedtracker.org/&quot;&gt;
  &lt;p&gt;Companies like &lt;a target=&quot;_blockquote&quot; rel=&quot;noopener nofollow noreferrer&quot; href=&quot;https://calibreapp.com/&quot;&gt;Calibre&lt;/a&gt; or &lt;a target=&quot;_blockquote&quot; rel=&quot;noopener nofollow noreferrer&quot; href=&quot;https://speedcurve.com/&quot;&gt;SpeedCurve&lt;/a&gt; offer this as a professional (and far more comprehensive) service, but not everyone can afford them. Whether you’re part of a small company or run a non-profit/open-source project, SpeedTracker can help you keep an eye on the performance of your website for free.&lt;/p&gt;
  &lt;cite&gt;&lt;a target=&quot;_blockquote&quot; href=&quot;https://speedtracker.org/&quot;&gt;SpeedTracker.org&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;automate-website-performance-monitoring-free-with-speedtracker&quot;&gt;Automate Website Performance Monitoring Free With SpeedTracker&lt;/h2&gt;

&lt;p&gt;In a previous life I used &lt;a target=&quot;_blank&quot; rel=&quot;noopener nofollow noreferrer&quot; href=&quot;http://www.showslow.com/&quot;&gt;ShowSlow&lt;/a&gt; to monitor website performance. But, unfortunately, ShowSlow never lived up to my expectations in the long run. Struggling to find a better way to do website performance monitoring, I stumbled upon SpeedTracker.&lt;/p&gt;

&lt;p&gt;Getting started with website speed tests was simple.&lt;/p&gt;

&lt;h3 id=&quot;getting-started-with-speedtracker&quot;&gt;Getting Started With SpeedTracker&lt;/h3&gt;

&lt;p&gt;Getting started with SpeedTracker was as easy as following their &lt;a target=&quot;_speedtracker&quot; rel=&quot;noopener&quot; href=&quot;https://speedtracker.org/docs&quot;&gt;Quick Start documentation&lt;/a&gt;. They’ve even included a screencast to help you on your journey to page load speed perfection:&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://player.vimeo.com/video/185952137&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;You’ll be up and running in no time.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;Looking for something more advanced? Check out &lt;a href=&quot;https://www.sitespeed.io/&quot;&gt;Sitespeed.io&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;speedtracker-in-action&quot;&gt;SpeedTracker In Action&lt;/h3&gt;

&lt;p&gt;Screencasts are great. But what’s even better? &lt;strong&gt;Live demos!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Head to &lt;strong&gt;&lt;a href=&quot;http://speed.habd.as&quot;&gt;speed.habd.as&lt;/a&gt; to view dashboard&lt;/strong&gt; with websites I’m monitoring with SpeedTracker. Feel free to click around and experiment with the tool while you’re in there.&lt;/p&gt;

&lt;p&gt;And if you’re curious how I set it up, my &lt;a target=&quot;_speedtracker&quot; href=&quot;https://github.com/jhabdas/speedtracker&quot;&gt;implementation is open source&lt;/a&gt; on GitHub thanks to SpeedTracker’s handy &lt;a target=&quot;_speedtracker&quot; href=&quot;https://speedtracker.org/encrypt&quot;&gt;web-based encryption tool&lt;/a&gt;. You can even &lt;a target=&quot;_speedtracker&quot; href=&quot;https://github.com/speedtracker/speedtracker-api/pull/23&quot;&gt;encrypt the website URLs&lt;/a&gt; you’re tracking if you want to be hush hush about it.&lt;/p&gt;

&lt;h3 id=&quot;measuring-progressive-web-apps&quot;&gt;Measuring Progressive Web Apps&lt;/h3&gt;

&lt;p&gt;In addition to providing basic website performance testing leveraging the power of &lt;a target=&quot;_blank&quot; href=&quot;https://www.webpagetest.org/&quot;&gt;WebPageTest.org&lt;/a&gt;, SpeedTracker &lt;a target=&quot;_speedtracker&quot; href=&quot;https://github.com/speedtracker/speedtracker-api/pull/27&quot;&gt;also provides&lt;/a&gt; PageSpeed and Lighthouse metrics.&lt;/p&gt;

&lt;p&gt;Now you can &lt;em&gt;really&lt;/em&gt; find out if your &lt;abbr title=&quot;Progressive Web App&quot;&gt;PWA&lt;/abbr&gt; cuts the mustard. And you won’t need a Chrome extension or separate website checker to monitor your web performance.&lt;/p&gt;

&lt;h3 id=&quot;digital-narcissism-at-its-finest&quot;&gt;Digital Narcissism At It’s Finest&lt;/h3&gt;

&lt;p&gt;It’s true. Sometimes we just can’t get enough vanity metrics. With SpeedTracker installed it’s quite likely you’re going to need a new &lt;a target=&quot;_blank&quot; rel=&quot;noopener nofollow noreferrer&quot; href=&quot;https://thecoffeelicious.com/this-is-the-antidote-for-digital-narcissism-998b424a1ba1&quot;&gt;Antidote for Digital Narcissism&lt;/a&gt;. But who could blame you? I know I won’t.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://speed.habd.as/&quot;&gt;&lt;img src=&quot;/images/speedtracker-hackcabin.png&quot; alt=&quot;Hack Cabin Rendering Metrics display chart&quot; title=&quot;Click to view metrics&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Abdul Yahya</name><email>contact@ayahya.me</email></author><category term="lighthouse" /><category term="pwa" /><category term="performance" /><category term="monitoring" /><summary type="html">Progressive Monitoring for your Progressive Web Apps.</summary></entry><entry><title type="html">Zero to HTTP/2 with AWS and Hugo</title><link href="/blog/2017/02/zero-to-http-2-aws-hugo/" rel="alternate" type="text/html" title="Zero to HTTP/2 with AWS and Hugo" /><published>2017-02-10T00:41:53-08:00</published><updated>2017-02-10T00:41:53-08:00</updated><id>/blog/2017/02/zero-to-http-2-aws-hugo</id><content type="html" xml:base="/blog/2017/02/zero-to-http-2-aws-hugo/">&lt;p&gt;So you learned how &lt;a target=&quot;_intro&quot; href=&quot;https://www.netlify.com/blog/2017/03/16/smashing-magazine-just-got-10x-faster/&quot; rel=&quot;noreferrer nofollow noopener&quot;&gt;Smashing Magazine’s website just got 10x faster&lt;/a&gt; and want to create your own &lt;a target=&quot;_intro&quot; href=&quot;https://jamstack.org/&quot; rel=&quot;noreferrer nofollow noopener&quot;&gt;JAMstack site&lt;/a&gt;. If so, you’re in luck. And I’ll show you how to do it using AWS, so you can get a &lt;strong&gt;free year of hosting&lt;/strong&gt; and not have to worry about getting locked into tiered plan pricing thereafter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this tutorial you will learn how to go from Zero to HTTP/2 with &lt;abbr title=&quot;Amazon Web Services&quot;&gt;AWS&lt;/abbr&gt; and Hugo, the &lt;a href=&quot;/best-jamstack-site-generator/&quot;&gt;fastest static site generator&lt;/a&gt; in existence.&lt;/strong&gt;&lt;/p&gt;

&lt;aside class=&quot;notice--success&quot;&gt;
  &lt;h4&gt;Why spend time doing this?&lt;/h4&gt;
  &lt;p&gt;Here are some carrots, assuming you even like vegetables. When finished you will have:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Your own &lt;abbr title=&quot;JavaScript, APIs and Markup&quot;&gt;JAM&lt;/abbr&gt;stack site built on &lt;a href=&quot;https://go.habd.as/2n4mmjC&quot;&gt;After Dark.&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Page content loads in a &lt;b&gt;single HTTP request&lt;/b&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;Zero-downtime deployments&lt;/b&gt; with instant cache invalidation.&lt;/li&gt;
    &lt;li&gt;Ability to generate &lt;b&gt;~1000 pages per second&lt;/b&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;HTTPS by default&lt;/b&gt;, with automatic secure redirects.&lt;/li&gt;
    &lt;li&gt;Domain &lt;b&gt;email forwarding&lt;/b&gt; with cryptographic message authentication.&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;Custom SSL/TLS&lt;/b&gt; certs with automatic renewal.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/aside&gt;

&lt;p&gt;Here’s an example what your site might look like, save for customizations (click for preview):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hackcabin.com&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/comfusion/after-dark/master/images/minimal-mac.png&quot; alt=&quot;After Dark theme for Hugo screenshots&quot; title=&quot;After Dark running on a MacBook and iPhone&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you’re ready to get your hands dirty, continue on for the full set of step-by-step instructions on how to go from Zero to HTTP/2 with AWS and Hugo.&lt;/p&gt;

&lt;aside class=&quot;sidebar__right&quot;&gt;
&lt;nav class=&quot;toc&quot;&gt;
    &lt;header&gt;&lt;h4 class=&quot;nav__title&quot;&gt;&lt;i class=&quot;fa fa-file-text&quot;&gt;&lt;/i&gt; On This Page&lt;/h4&gt;&lt;/header&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#get-started-with-aws-and-hugo&quot; id=&quot;markdown-toc-get-started-with-aws-and-hugo&quot;&gt;Get started with AWS and Hugo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#install-s3_website&quot; id=&quot;markdown-toc-install-s3_website&quot;&gt;Install s3_website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configure-s3_website&quot; id=&quot;markdown-toc-configure-s3_website&quot;&gt;Configure s3_website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#youre-done-well-almost&quot; id=&quot;markdown-toc-youre-done-well-almost&quot;&gt;You’re done! Well, almost…&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configure-https-on-a-custom-domain&quot; id=&quot;markdown-toc-configure-https-on-a-custom-domain&quot;&gt;Configure HTTPS on a custom domain&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#configure-ses-to-receive-email&quot; id=&quot;markdown-toc-configure-ses-to-receive-email&quot;&gt;Configure SES to receive email&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#request-certificate-using-certificate-manager&quot; id=&quot;markdown-toc-request-certificate-using-certificate-manager&quot;&gt;Request Certificate using Certificate Manager&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#confirm-certificate-request&quot; id=&quot;markdown-toc-confirm-certificate-request&quot;&gt;Confirm Certificate Request&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#configure-cloudfront&quot; id=&quot;markdown-toc-configure-cloudfront&quot;&gt;Configure CloudFront&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#appreciate-your-hard-work&quot; id=&quot;markdown-toc-appreciate-your-hard-work&quot;&gt;Appreciate your hard work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/nav&gt;
&lt;/aside&gt;

&lt;h2 id=&quot;get-started-with-aws-and-hugo&quot;&gt;Get started with AWS and Hugo&lt;/h2&gt;

&lt;p&gt;First, &lt;a href=&quot;https://portal.aws.amazon.com/gp/aws/developer/registration/&quot;&gt;create an AWS account&lt;/a&gt;. If this is your first time using AWS you will benefit from a free year of service (after that it’s on par with the &lt;a href=&quot;https://go.habd.as/2oiL54G&quot;&gt;Vultr 20GB SSD plan&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Next, install &lt;a href=&quot;https://github.com/comfusion/after-dark&quot;&gt;After Dark&lt;/a&gt;, a free retro dark theme I created for Hugo. The instructions assume you’re using macOS, though other platforms are supported as well.&lt;/p&gt;

&lt;h2 id=&quot;install-s3_website&quot;&gt;Install s3_website&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/laurilehmijoki/s3_website&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s3_website&lt;/code&gt;&lt;/a&gt; is a RubyGem utilizing the AWS-CLI that can be used to automatically configure your website on AWS, and deploy it to CloudFront in a matter of seconds from your local machine. See &lt;a href=&quot;https://github.com/laurilehmijoki/s3_website&quot;&gt;the README&lt;/a&gt; for installation and usage instructions.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Be sure you install version 3.0.0 or better to take advantage of the HTTP/2 configuration settings for CloudFront distributions.&lt;/p&gt;

&lt;h2 id=&quot;configure-s3_website&quot;&gt;Configure s3_website&lt;/h2&gt;

&lt;p&gt;If you followed the instructions, you should now have a S3 bucket for your website, automatically created or updated by &lt;code class=&quot;highlighter-rouge&quot;&gt;s3_website&lt;/code&gt;, with your After Dark site deployed. If you &lt;em&gt;really&lt;/em&gt; followed the instructions you will also have a CloudFront distribution configured to use HTTP/2, all wired up to your S3 bucket and ready to go.&lt;/p&gt;

&lt;p&gt;Here’s what my current configuration looks like for &lt;a href=&quot;https://hackcabin.com&quot;&gt;Hack Cabin&lt;/a&gt;, which also uses After Dark:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;s3_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;%= ENV['S3_ACCESS_KEY_ID'] %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;s3_secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;%= ENV['S3_SECRET_KEY'] %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;s3_bucket&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hackcabin.com&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;public&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;index_document&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;error_document&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;404.html&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;max_age&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;videos/*&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2629000&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;js/*&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2629000&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;300&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;gzip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.html&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.mp4&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.xml&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;s3_reduced_redundancy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;cloudfront_distribution_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;%= ENV['CLOUDFRONT_DISTRIBUTION_ID'] %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;cloudfront_distribution_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;default_cache_behavior&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;min_ttl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;%= 60 * 60 * 24 %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;http_version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http2&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;aliases&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hackcabin.com&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And here’s an example &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt; file to accompany it:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;S3_ACCESS_KEY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;IKEAJ56NKXWH7IRRHEBA
&lt;span class=&quot;nv&quot;&gt;S3_SECRET_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;oVXNqOym4TaHOFQFj3lL4q/SWaeAJkI5Wzp2JjG5
&lt;span class=&quot;nv&quot;&gt;CLOUDFRONT_DISTRIBUTION_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;A17WRF71NFFL7K
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;youre-done-well-almost&quot;&gt;You’re done! Well, almost…&lt;/h2&gt;

&lt;p&gt;Sites served over CloudFront allow HTTPS by default, meaning you do not have to do anything to enjoy SSL. However, if you’re using a custom domain (which can be registered for as little as $0.88/year using &lt;a href=&quot;http://go.habd.as/2nioaFH&quot;&gt;namecheap&lt;/a&gt;) you need to do a little more work.&lt;/p&gt;

&lt;h2 id=&quot;configure-https-on-a-custom-domain&quot;&gt;Configure HTTPS on a custom domain&lt;/h2&gt;

&lt;p&gt;This part requires some manual work in the AWS Console, but nothing too extravagant. And while some &lt;a href=&quot;https://medium.com/@richardkall/setup-lets-encrypt-ssl-certificate-on-amazon-cloudfront-b217669987b2&quot;&gt;may encourage you&lt;/a&gt; to use Let’s Encrypt, it has been my personal experience using the AWS Certificate Manager is &lt;strong&gt;significantly easier&lt;/strong&gt; to manage over time.&lt;/p&gt;

&lt;p&gt;To obtain a custom SSL certificate using the Certificate Manager you need to configure SES to receive email.&lt;/p&gt;

&lt;h3 id=&quot;configure-ses-to-receive-email&quot;&gt;Configure SES to receive email&lt;/h3&gt;

&lt;p&gt;The reason this is needed is because the certificate authority must be able to verify you own your domain name. I’ve linked to instructions on how to do this in my post titled &lt;a href=&quot;https://habd.as/serverless-email-forwards-ses-lambda-crash-course/#configure-ses-to-send-and-receive-email&quot;&gt;Serverless Email with SES and Lambda&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Skip the majority of the instructions you see and focus only on receiving email with SES.&lt;/p&gt;

&lt;p&gt;Once you’ve finished you will have a new S3 bucket capable of receiving emails at your custom domain and can now request a custom SSL cert using the Certificate Manager.&lt;/p&gt;

&lt;h3 id=&quot;request-certificate-using-certificate-manager&quot;&gt;Request Certificate using Certificate Manager&lt;/h3&gt;

&lt;p&gt;First, access Certificate Manager from the AWS Console and choose &lt;strong&gt;Request a certificate&lt;/strong&gt;. Then enter the domain name or names for which you’d like to request a certificate for, e.g.:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hackcabin.com&lt;/li&gt;
  &lt;li&gt;*.hackcabin.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Form there choose &lt;strong&gt;Review and request&lt;/strong&gt; followed by &lt;strong&gt;Confirm and request&lt;/strong&gt;. This will kick off several verification emails to SES, which will store them in the related S3 bucket set-up in the last step.&lt;/p&gt;

&lt;h3 id=&quot;confirm-certificate-request&quot;&gt;Confirm Certificate Request&lt;/h3&gt;

&lt;p&gt;To confirm the request of the SSL Certificate open the S3 Bucket collecting emails, open one of the emails received at the time of the request, and look for the verification URL. Copy and paste the verification URL into a browser and navigate to the page to verify domain ownership.&lt;/p&gt;

&lt;p&gt;You can watch the status of the verification from the Certificate Manager. If too much time elapses and the request is not verified the certificate request will become invalid and you will need to re-request.&lt;/p&gt;

&lt;h3 id=&quot;configure-cloudfront&quot;&gt;Configure CloudFront&lt;/h3&gt;

&lt;p&gt;Now that you’ve successfully obtained your SSL certificate it’s time to hook it up to your CloudFront distribution. This is also a good time to enable HTTPS by default.&lt;/p&gt;

&lt;p&gt;To use your custom cert do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to CloudFront in the AWS Console and choose your distribution.&lt;/li&gt;
  &lt;li&gt;Choose &lt;strong&gt;Edit&lt;/strong&gt; from the &lt;em&gt;General&lt;/em&gt; tab and select &lt;strong&gt;Custom SSL certificate&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Select the certificate&lt;/strong&gt; you just created from the selection dropdown.&lt;/li&gt;
  &lt;li&gt;Scroll to the bottom of the page and choose &lt;strong&gt;Yes, Edit&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To enable HTTPS by default do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to CloudFront in the AWS Console and choose your distribution.&lt;/li&gt;
  &lt;li&gt;Navigate to the &lt;em&gt;Behaviors&lt;/em&gt; tab, select the “Default” behavior and choose &lt;strong&gt;Edit&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Under &lt;em&gt;Viewer Protocol Policy&lt;/em&gt; choose &lt;strong&gt;Redirect HTTP to HTTPS&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Scroll to the bottom of hte page and choose &lt;strong&gt;Yes, Edit&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;appreciate-your-hard-work&quot;&gt;Appreciate your hard work&lt;/h2&gt;

&lt;p&gt;Navigate to your website’s custom domain name and ensure it is being served over HTTPS. Verify the HTTP to HTTPS redirection is working as expected by entering a URL starting with HTTP (it should 301 to HTTPS). And, finally, use &lt;a href=&quot;https://tools.keycdn.com/http2-test&quot;&gt;HTTP/2 Test Tool&lt;/a&gt; to verify HTTP/2 is functioning as expected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hackcabin-http2-test.png&quot; alt=&quot;HTTP/2 Test Proof&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That’s it. You’re finished. This time for real.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You’ve just gone from Zero to HTTP/2 with AWS and Hugo.&lt;/p&gt;

&lt;p&gt;From here you can start &lt;a href=&quot;https://comfusion.github.io/after-dark/#customizing&quot;&gt;customizing the theme&lt;/a&gt;, create some microservices for your site using &lt;a href=&quot;/serverless-email-forwards-ses-lambda-crash-course/&quot;&gt;Serverless and Lambda&lt;/a&gt;, set-up your own &lt;a href=&quot;https://gitea.io/&quot;&gt;self-hosted Git service&lt;/a&gt; using Gitea. Or maybe you want to start measuring the speed of your website over time with &lt;a href=&quot;https://speedtracker.org&quot;&gt;SpeedTracker&lt;/a&gt;, explore some of the other wonderful &lt;a href=&quot;http://themes.gohugo.io/&quot;&gt;Hugo themes available&lt;/a&gt;, or even create your own theme using some of the &lt;a href=&quot;/jamstack-css-framework-tool-library/&quot;&gt;JAMstack CSS Frameworks, Tools and Libraries&lt;/a&gt;. The possibilities are endless. Have fun!&lt;/p&gt;

&lt;p&gt;And, as always, please feel free to share your success stories or battle cries in the comments section below.&lt;/p&gt;</content><author><name>Abdul Yahya</name><email>contact@ayahya.me</email></author><category term="aws" /><category term="hugo" /><category term="http2" /><category term="performance" /><category term="ssl" /><category term="https" /><category term="jamstack" /><summary type="html">A step-by-step guide to creating your own JAMstack site using Amazon Web Services and the Hugo static site generator.</summary></entry><entry><title type="html">PageSpeed 100 with Jekyll, S3 and CloudFront</title><link href="/blog/2016/06/pagespeed-100-with-jekyll-s3-and-cloudfront/" rel="alternate" type="text/html" title="PageSpeed 100 with Jekyll, S3 and CloudFront" /><published>2016-06-16T09:20:07-07:00</published><updated>2016-06-16T09:20:07-07:00</updated><id>/blog/2016/06/pagespeed-100-with-jekyll-s3-and-cloudfront</id><content type="html" xml:base="/blog/2016/06/pagespeed-100-with-jekyll-s3-and-cloudfront/">&lt;aside class=&quot;sidebar__right&quot;&gt;
&lt;nav class=&quot;toc&quot;&gt;
    &lt;header&gt;&lt;h4 class=&quot;nav__title&quot;&gt;&lt;i class=&quot;fa fa-file-text&quot;&gt;&lt;/i&gt; On This Page&lt;/h4&gt;&lt;/header&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#an-evolution-of-speed&quot; id=&quot;markdown-toc-an-evolution-of-speed&quot;&gt;An Evolution of Speed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hitting-pagespeed-100&quot; id=&quot;markdown-toc-hitting-pagespeed-100&quot;&gt;Hitting PageSpeed 100&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#install-jekyll&quot; id=&quot;markdown-toc-install-jekyll&quot;&gt;Install Jekyll&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#add-the-jekyll-assets-gem&quot; id=&quot;markdown-toc-add-the-jekyll-assets-gem&quot;&gt;Add the Jekyll Assets gem&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#concatenate-and-output-fingerprinted-js&quot; id=&quot;markdown-toc-concatenate-and-output-fingerprinted-js&quot;&gt;Concatenate and output fingerprinted JS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#split-out-critical-path-css&quot; id=&quot;markdown-toc-split-out-critical-path-css&quot;&gt;Split out critical path CSS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lazy-load-remaining-css&quot; id=&quot;markdown-toc-lazy-load-remaining-css&quot;&gt;Lazy-load remaining CSS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#optimize-images&quot; id=&quot;markdown-toc-optimize-images&quot;&gt;Optimize images&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dealing-with-web-fonts&quot; id=&quot;markdown-toc-dealing-with-web-fonts&quot;&gt;Dealing with web fonts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#iterate-on-speed&quot; id=&quot;markdown-toc-iterate-on-speed&quot;&gt;Iterate on speed&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#install-the-s3-website-gem&quot; id=&quot;markdown-toc-install-the-s3-website-gem&quot;&gt;Install the S3 Website gem&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#deploy-with-travis&quot; id=&quot;markdown-toc-deploy-with-travis&quot;&gt;Deploy with Travis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#extra-credit-add-ssl-to-your-cloudfront-distribution&quot; id=&quot;markdown-toc-extra-credit-add-ssl-to-your-cloudfront-distribution&quot;&gt;Extra credit: Add SSL to your CloudFront distribution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-end-is-the-beginning-is-the-end&quot; id=&quot;markdown-toc-the-end-is-the-beginning-is-the-end&quot;&gt;The end is the beginning is the end&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/nav&gt;
&lt;/aside&gt;

&lt;p&gt;After moving this website from WordPress to &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; in 2013 I’ve &lt;a href=&quot;/moved-two-sites-to-octopress/&quot;&gt;written&lt;/a&gt; &lt;a href=&quot;/host-images-on-s3-with-octopress/&quot;&gt;enthusiastically&lt;/a&gt; &lt;a href=&quot;/turbocharge-your-octopress-blog/&quot;&gt;about&lt;/a&gt; &lt;a href=&quot;/simple-websites-jekyll-docker/&quot;&gt;Jekyll&lt;/a&gt;. But it wasn’t until recently that I was able to hit the elusive &lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;PageSpeed Insights&lt;/a&gt; &lt;strong&gt;score of 100&lt;/strong&gt; for both desktop and mobile performance. Here’s how I got there using Jekyll with S3 and CloudFront, and how you can too.&lt;/p&gt;

&lt;h2 id=&quot;an-evolution-of-speed&quot;&gt;An Evolution of Speed&lt;/h2&gt;

&lt;p&gt;When I started blogging back in 2008 the top two content management platforms by mindshare were probably Movable Type and WordPress. I went with WordPress as it was clearly going somewhere and it served me well for a few years. But by 2012 I was getting frustrated with WordPress, managing hosting, making SQL database back-ups, constantly optimizing performance after some plug-in would invariably do something bad, not to mention having to stay on top of a bevy of seemingly never-ending WordPress plug-in updates.&lt;/p&gt;

&lt;p&gt;In late 2011 Amazon CTO Werner Vogels was writing about &lt;a href=&quot;http://www.allthingsdistributed.com/2011/08/Jekyll-amazon-s3.html&quot;&gt;Jekyll &amp;amp; Amazon S3&lt;/a&gt;, and CMS-free static websites like Jekyll started to rise in popularity and gain more widespread adoption.&lt;/p&gt;

&lt;p&gt;After switching from WordPress to Jekyll here’s roughly what my PageSpeed has looked like over time:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;PageSpeed&lt;/th&gt;
      &lt;th&gt;Platform&lt;/th&gt;
      &lt;th&gt;Hosting (CDN)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2009&lt;/td&gt;
      &lt;td&gt;72&lt;/td&gt;
      &lt;td&gt;WordPress&lt;/td&gt;
      &lt;td&gt;BlueHost (None)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2013&lt;/td&gt;
      &lt;td&gt;85&lt;/td&gt;
      &lt;td&gt;Jekyll&lt;/td&gt;
      &lt;td&gt;GitHub Pages (None&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2014&lt;/td&gt;
      &lt;td&gt;88&lt;/td&gt;
      &lt;td&gt;Jekyll&lt;/td&gt;
      &lt;td&gt;DigitalOcean (CloudFlare)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;92&lt;/td&gt;
      &lt;td&gt;Jekyll&lt;/td&gt;
      &lt;td&gt;DigitalOcean (CloudFlare)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2016&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;Jekyll&lt;/td&gt;
      &lt;td&gt;Amazon S3 (CloudFront)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As you can see Jekyll is holding its weight for my relatively small site, and page speed has been increasing over time (and understanding). And while build times &lt;a href=&quot;https://mademistakes.com/articles/using-jekyll-2016/&quot;&gt;start to suffer&lt;/a&gt; as sites reach 1000 pages, it’s possible to BYO asset pipeline much like what some are &lt;a href=&quot;https://github.com/adrinux/web-starter-hugo&quot;&gt;doing with Hugo&lt;/a&gt; (which is super fast, by the way).&lt;/p&gt;

&lt;h2 id=&quot;hitting-pagespeed-100&quot;&gt;Hitting PageSpeed 100&lt;/h2&gt;

&lt;p&gt;Okay, enough with the rambling. Want to hit a page speed of 100? Here’s how using Jekyll with S3 and CloudFront.&lt;/p&gt;

&lt;h3 id=&quot;install-jekyll&quot;&gt;Install Jekyll&lt;/h3&gt;

&lt;p&gt;I’m going to assume you can figure out how to &lt;a href=&quot;http://jekyllrb.com/docs/installation/&quot;&gt;install Jekyll&lt;/a&gt;. There are &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;hundreds of&lt;/a&gt; &lt;a href=&quot;http://jekyll.tips/templates/&quot;&gt;free themes&lt;/a&gt; available. But two I recommend are &lt;a href=&quot;http://lanyon.getpoole.com/&quot;&gt;Lanyon&lt;/a&gt; by Mark Otto and &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt; by Michael Rose. If you’re coming from WordPress or another blogging platform you can migrate your content to Jekyll using one of the &lt;a href=&quot;https://import.jekyllrb.com/docs/home/&quot;&gt;many available importers&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;add-the-jekyll-assets-gem&quot;&gt;Add the Jekyll Assets gem&lt;/h3&gt;

&lt;p&gt;In order to get a perfect page speed we’re going to use a plug-in maintained by the Jekyll core team called &lt;a href=&quot;https://github.com/jekyll/jekyll-assets&quot;&gt;Jekyll Assets&lt;/a&gt;. Add it to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; easily with &lt;a href=&quot;https://github.com/DruRly/gemrat&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gemrat&lt;/code&gt;&lt;/a&gt;. If you don’t have a Gemfile yet, go ahead and &lt;code class=&quot;highlighter-rouge&quot;&gt;touch Gemfile&lt;/code&gt; before installing.&lt;/p&gt;

&lt;p&gt;While you’re in there also install the following gems used by Jekyll Assets:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gemrat jekyll uglifier sass autoprefixer-rails
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you’re using Less, ES2015, FontAwesome, Bootstrap or wanting to process images with Image Magick see Jekyll Assets plug-in docs for more info.&lt;/p&gt;

&lt;p&gt;Once installed update or add &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-assets&lt;/code&gt; to the list of &lt;code class=&quot;highlighter-rouge&quot;&gt;gems: [jekyll-assets, ...]&lt;/code&gt; in your Jekyll site &lt;code class=&quot;highlighter-rouge&quot;&gt;_.config.yml&lt;/code&gt; and, elsewhere in the config file, set it up like so:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Jekyll Assets&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# - https://jekyll.github.io/jekyll-assets/&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;_assets/css&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;_assets/js&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;autoprefixer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;browsers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;versions&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5%&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;IE&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Configure the above sources to point to your files, or simply move your files into a &lt;a href=&quot;https://github.com/jekyll/jekyll-assets#configuration&quot;&gt;default source location&lt;/a&gt; so it’s clearer they’re being operated on by a plug-in.&lt;/p&gt;

&lt;h3 id=&quot;concatenate-and-output-fingerprinted-js&quot;&gt;Concatenate and output fingerprinted JS&lt;/h3&gt;

&lt;p&gt;For externally loaded files, Jekyll Assets will automatically handle filename digesting (a.k.a. fingerprinting), necessary to allow CDN cache-busting, and code uglification when built with the &lt;code class=&quot;highlighter-rouge&quot;&gt;JEKYLL_ENV=production&lt;/code&gt; environment flag. But it needs to know a little about how your JS files are structured in order to be most effective.&lt;/p&gt;

&lt;p&gt;Depending on your site structure you’ll likely either want to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; or both &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor.js&lt;/code&gt;. I tend to prefer the later as vendor code changes less often and, therefore, can be cached more aggressively in the browser (which we’ll get to in a bit).&lt;/p&gt;

&lt;p&gt;To concatenate files simply &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; them from a Jekyll Assets &lt;em&gt;source&lt;/em&gt; configured earlier:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//= require vendor/jquery/jquery-1.12.1.min.js
//= require plugins/jquery.fitvids.js
//= require plugins/jquery.greedy-navigation.js
//= require plugins/jquery.magnific-popup.js
//= require plugins/jquery.smooth-scroll.min.js
//= require plugins/stickyfill.min.js
//= require vendor/anchor.js
//= require vendor/particles.min.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Assuming the above was the entire contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor.js&lt;/code&gt;, when the build runs, the contents of the required files will be concatenated into a single file and can added to the generated page using the Jekyll Assets &lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;Here’s an example showing two tags, one of which is loaded asynchronously:&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;vendor&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;app&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;async&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Include scripts directly above (or very near) the &lt;code class=&quot;highlighter-rouge&quot;&gt;BODY&lt;/code&gt; closing tag. Ideally both of them would load &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;, but it’s not strictly necessary for a perfect page speed and comes with a &lt;a href=&quot;http://www.stevesouders.com/blog/2008/12/27/coupling-async-scripts/&quot;&gt;set of complexities&lt;/a&gt; we can ignore for now by not coupling them (or simply using a single file like &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Besides that make sure you’re not using any blocking &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; tags (those without &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; attributes set) elsewhere in the document and you should be all set. Try it out with the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JEKYLL_ENV=production bundle exec jekyll serve --no-watch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Add frequently run commands to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt; or other script so they can be executed more easily. For example, the above can be run simply by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;rake serve:prod&lt;/code&gt; using &lt;a href=&quot;https://github.com/jhabdas/habd.as/blob/620a7252ba3faed613d6ab39c1297ac248318768/Rakefile.rb#L5-L20&quot;&gt;my Rakefile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If it worked you’ll see fingerprinted files like the following in &lt;code class=&quot;highlighter-rouge&quot;&gt;_site/assets/&lt;/code&gt; following the build:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vendor-78aff70ee05fbca6ac66ad56fe36d0a13f5803a1427eb3b55e583efcfd1cd96b.js
app-7f3d371e86e2669a4a7b472f06990b29551f3c2929d38b1bbf5f7f0e30e315ce.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And the generated HTML to should link to the fingerprinted file(s).&lt;/p&gt;

&lt;p&gt;Later, when we set-up S3 and CloudFront, these file names allow us to aggressively cache the files at the browser to prevent re-downloading unless the file contents change. But first we need to handle the CSS.&lt;/p&gt;

&lt;h3 id=&quot;split-out-critical-path-css&quot;&gt;Split out critical path CSS&lt;/h3&gt;

&lt;p&gt;CSS is generally included via a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt; in the document head, which is good for separation of content from style, but bad for site performance as it requires a blocking HTTP request which slows document time-to-interactive.&lt;/p&gt;

&lt;p&gt;Critical Path CSS is commonly used to refer to the CSS responsible for rendering the visible content of a webpage when it first loads. Oftentimes what’s required for first render is only a fraction of the CSS sent to a browser before a typical page load. As a result, there’s a performance gain by inlining critical CSS into a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag in the document &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; and loading the rest asynchronously.&lt;/p&gt;

&lt;p&gt;If you’re using Sass or Less separation should be straight-forward. Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;critical.scss|less&lt;/code&gt; file and &lt;code class=&quot;highlighter-rouge&quot;&gt;@import&lt;/code&gt; only the styles necessary to display what appears when page first renders.&lt;/p&gt;

&lt;p&gt;With Jekyll Assets we can output our critical path CSS (or all of the it, if there’s not too much) like so:&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;style&amp;gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;asset_source&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;critical.css&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; It’s also possible to use the &lt;a href=&quot;cheat.jekyll.tips&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scssify&lt;/code&gt;&lt;/a&gt; liquid filter to &lt;a href=&quot;http://www.kevinsweet.com/inline-scss-jekyll-github-pages&quot;&gt;achieve a similar result&lt;/a&gt; but I found the technique to &lt;a href=&quot;https://github.com/penibelst/jekyll-compress-html/issues/78&quot;&gt;cause issues&lt;/a&gt; when used with the popular &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-compress-html&lt;/code&gt; and it feels wonky moving Sass files to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&quot;lazy-load-remaining-css&quot;&gt;Lazy-load remaining CSS&lt;/h3&gt;

&lt;p&gt;If you properly separated your critical path CSS you can load the rest asynchronously–which helps prevent scroll jank as the user scroll immediately after a page loads. To do so I recommend doing one or both of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using &lt;a href=&quot;https://w3c.github.io/preload/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rel=&quot;preload&quot;&lt;/code&gt; link type&lt;/a&gt; (W3C draft at time of writing); and,&lt;/li&gt;
  &lt;li&gt;Loading the CSS using a JS loader like &lt;a href=&quot;https://github.com/filamentgroup/loadCSS&quot;&gt;loadCSS&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s how to use both at the same time for non-critical path CSS:&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;asset_source&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;vendor/loadCSS.js&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  loadCSS(&quot;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;asset_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;noncritical.css&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&quot;)
&amp;lt;/script&amp;gt;
&amp;lt;noscript&amp;gt;&amp;lt;link href=&quot;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;asset_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;noncritical.css&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&quot; rel=&quot;preload&quot; as=&quot;style&quot;&amp;gt;&amp;lt;/noscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Tip:&lt;/strong&gt; If you don’t get your critical path CSS right you (and your users) may notice odd display behavior when the page loads non-critical styles, so be sure to test this carefully to ensure a good UX.&lt;/p&gt;

&lt;h3 id=&quot;optimize-images&quot;&gt;Optimize images&lt;/h3&gt;

&lt;p&gt;There are a lot of posts on this topic so I won’t go in depth here. If your site is heavy on image content you’re going to want responsive images. And if that’s the case I agree with &lt;a href=&quot;https://mademistakes.com/articles/using-jekyll-2016/&quot;&gt;Michael Rose&lt;/a&gt; (&lt;a href=&quot;http://blog.cloudfour.com/the-real-conflict-behind-picture-and-srcset/&quot;&gt;and others&lt;/a&gt;) using &lt;code class=&quot;highlighter-rouge&quot;&gt;srcset&lt;/code&gt; is the correct approach for creating responsive images unless you need to incorporate &lt;em&gt;art direction&lt;/em&gt;, in which case you should use the HTML 5 &lt;code class=&quot;highlighter-rouge&quot;&gt;picture&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;With Jekyll plug-ins, responsive images using &lt;code class=&quot;highlighter-rouge&quot;&gt;srcset&lt;/code&gt; can be created by  &lt;a href=&quot;https://github.com/wildlyinaccurate/jekyll-responsive-image&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-responsive-image&lt;/code&gt;&lt;/a&gt; while &lt;code class=&quot;highlighter-rouge&quot;&gt;picture&lt;/code&gt; elements can be created using &lt;a href=&quot;https://github.com/robwierzbowski/jekyll-picture-tag&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-picture-tag&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Identify large images by navigating to the location where you’re storing images in your project and then simply &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -al&lt;/code&gt; and look for large file sizes. Then use GiMP (&lt;code class=&quot;highlighter-rouge&quot;&gt;brew cask install gimp&lt;/code&gt; if using &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; on OS X) and &lt;a href=&quot;https://github.com/imagemin/imagemin&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;imagemin&lt;/code&gt;&lt;/a&gt; to make adjustments as you see fit.&lt;/p&gt;

&lt;h3 id=&quot;dealing-with-web-fonts&quot;&gt;Dealing with web fonts&lt;/h3&gt;

&lt;p&gt;This is a tricky topic as web fonts are commonly used to style content used on first page render and almost always require a separate HTTP request—which hurts page speed. However, you can apply a technique similar to inline CSS using data URIs with &lt;a href=&quot;/turbocharge-your-octopress-blog/#inline-web-fonts&quot;&gt;Inline Web Fonts&lt;/a&gt; if your your font stack requires use of a web font.&lt;/p&gt;

&lt;h3 id=&quot;iterate-on-speed&quot;&gt;Iterate on speed&lt;/h3&gt;

&lt;p&gt;Rather than looking for all the things you &lt;em&gt;think&lt;/em&gt; your site needs in perfecting pagespeed you’re better of testing your way there–especially if you tend to get distracted by shiny things. You can do so from your local environment (read: you don’t have to deploy to another environment) using Ngrok.&lt;/p&gt;

&lt;p&gt;Install Ngrok (&lt;code class=&quot;highlighter-rouge&quot;&gt;brew cask install ngrok&lt;/code&gt; for Homebrew users on OS X) and do the following to expose your website to web traffic to the outside world.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start Jekyll with the production flag:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JEKYLL_ENV=production bundle exec jekyll serve --no-watch&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In a new tab, or with Jekyll in a background process, run:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ngrok http 4000&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ngrok will give you a externally facing domain (e.g. [https://b1aa30c8.ngrok.io]) you can plug into &lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;PageSpeed Insights&lt;/a&gt; so you can test directly against your dev environment without having to wait for code deployments.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Here’s an &lt;a href=&quot;https://github.com/google/web-starter-kit/blob/20eb47852b3d1c2f301dc1fcb5083e992ab359a0/gulpfile.babel.js#L212-L221&quot;&gt;example Gulp task&lt;/a&gt; that’ll run PageSpeed from CLI and can be scripted depending on your needs.&lt;/p&gt;

&lt;h3 id=&quot;install-the-s3-website-gem&quot;&gt;Install the S3 Website gem&lt;/h3&gt;

&lt;p&gt;Once you’ve gotten your PageSpeed Insights down to things like server response time, gzip compression and browser caching you’re ready to host the site on S3 with CloudFront and fix the remaining issues.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/laurilehmijoki/s3_website&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s3_website&lt;/code&gt;&lt;/a&gt; gem makes it ridiculously easy to host your static websites on S3 with CloudFront. Add it to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gemrat s3_website
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once installed following the &lt;a href=&quot;https://github.com/laurilehmijoki/s3_website&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s3_website&lt;/code&gt; instructions&lt;/a&gt; to create a config file, S3 bucket and connected CloudFront distribution—all from the command line. Here’s the &lt;a href=&quot;https://github.com/jhabdas/habd.as/blob/e2c38a13c75ec33feb5fe93ee9be4f3003b96017/s3_website.yml&quot;&gt;config file I was using&lt;/a&gt; when I hit PageSpeed 100. Notice I’m using the config to specify file extensions to compress, cache control headers and &lt;abbr title=&quot;Time to live&quot;&gt;TTL&lt;/abbr&gt; for the CloudFront distribution.&lt;/p&gt;

&lt;h2 id=&quot;deploy-with-travis&quot;&gt;Deploy with Travis&lt;/h2&gt;

&lt;p&gt;Although not necessary to hit lightning fast page speeds it’s possible to deploy your website using a continuous integration tool like &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis-CI&lt;/a&gt;—free for public repos. Here’s how I build and deploy my site to S3 using &lt;code class=&quot;highlighter-rouge&quot;&gt;s3_website&lt;/code&gt; and Travis.&lt;/p&gt;

&lt;p&gt;First, create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; file like:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.2&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle install&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rake deploy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above tells Travis to install dependencies from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; using Bundler, and then builds and deploys the site using the following tasks from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Usage: rake build&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Regenerate files for production&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:build&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;* Regenerating files for production...&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;JEKYLL_ENV=production bundle exec jekyll build&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Usage: rake s3_website&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;push the contents of ./_site to S3&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:s3_website&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;* syncing the contents of ./_site to the server&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s3_website push&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# use --force with S3 config updates&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Usage: rake deploy&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deploy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;deploy:prod&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deploy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Regenerate and sync production files, and notify services of the update&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:prod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s3_website&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pretty simple, right? There’s really not that much to it.&lt;/p&gt;

&lt;h2 id=&quot;extra-credit-add-ssl-to-your-cloudfront-distribution&quot;&gt;Extra credit: Add SSL to your CloudFront distribution&lt;/h2&gt;

&lt;p&gt;Let’s say you want to look boss by using &lt;a href=&quot;https://medium.com/@urish/exploring-the-physical-web-without-buying-beacons-efae51e36c2e&quot;&gt;the physical web&lt;/a&gt; to broadcast a link to &lt;a href=&quot;https://slides.com/jhabdas&quot;&gt;a slide deck&lt;/a&gt; for a presentation you’re about to give at a Meet-up. What better way to impress than to push out a link to the deck over Bluetooth during the meeting.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;This can be done with relative ease using Let’s Encrypt following &lt;a href=&quot;https://nparry.com/2015/11/14/letsencrypt-cloudfront-s3.html&quot;&gt;set-up SSL for your CloudFront distribution&lt;/a&gt;. Though, as &lt;a href=&quot;https://github.com/laurilehmijoki/s3_website/issues/202#issuecomment-174847183&quot;&gt;mentioned by Pat Hawks&lt;/a&gt; on the on &lt;code class=&quot;highlighter-rouge&quot;&gt;s3_website&lt;/code&gt; gem, “It would probably be easier and more convenient to just use AWS Certificate Manager instead.”&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Update 2016-10-24:&lt;/strong&gt; It is indeed easier to use the Amazon Certificate Manager manager to issue and renew SSL certs. There are a &lt;a href=&quot;https://github.com/laurilehmijoki/s3_website/issues/202#issuecomment-255569108&quot;&gt;couple of caveats&lt;/a&gt;, but overall the process is much more streamlined and natural when hosting your static site on AWS.&lt;/p&gt;

&lt;h2 id=&quot;the-end-is-the-beginning-is-the-end&quot;&gt;The end is the beginning is the end&lt;/h2&gt;

&lt;p&gt;In this post I covered the evolution of how I hit PageSpeed 100 and the techniques I used to get there so you can too. This post was inspired by the many Jekyll gods out there for sharing their tips on improving Jekyll performance, and a lot of personal trial and error. If you have any questions, or additional tips to share, please leave a note in the comments section below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ps100_768.png&quot; alt=&quot;Screenshot showing PageSpeed 100&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;GitHub Pages CDN &lt;a href=&quot;https://github.com/blog/1715-faster-more-awesome-github-pages&quot;&gt;didn’t exist until 2014&lt;/a&gt;.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Josh Habdas</name></author><category term="mobile" /><category term="performance" /><category term="jekyll" /><category term="blog" /><summary type="html">Perfect your Google PageSpeed with AWS S3 and CloudFront website hosting.</summary></entry></feed>